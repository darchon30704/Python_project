{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Project - 30 July 2018\n",
    "\n",
    "## <font color='blue'>Logistics:</font>\n",
    "+ **Signup sheet for lightning talk**: shared\n",
    "    - potential topics: any python library or concept of interest (not covered in class)\n",
    "    - key deliverable: in-class presentation + demo\n",
    "    - Some resources:\n",
    "        - https://docs.python.org/3.6/library/index.html\n",
    "        - https://pymotw.com/3/\n",
    "+ **Final project proposal**:\n",
    "    - Due date: 26 July 2018\n",
    "    - Deliverable:\n",
    "        - Team members\n",
    "        - Problem description\n",
    "            - Core idea: Implementing XYZ algorithm; Analyzing XYZ dataset etc.\n",
    "            - Pseudocode\n",
    "            - Expected input\n",
    "            - Expected output\n",
    "    - Final deliverable:\n",
    "        - presentation + demo\n",
    "        - github repo with code and documentation of how to run the program\n",
    "    - Examples:\n",
    "        - Implement, compare and contrast some sorting / searching algorithms\n",
    "        - Creating a simple game, like tic-tac-toe, sudoku\n",
    "        - Perform a real-world data analysis task\n",
    "            \n",
    "\n",
    "## Story so far...\n",
    "+ primitive python objects / data-types and operations (numbers, strings)\n",
    "+ logical / boolean operators\n",
    "+ variables and variable naming conventions (pep8, reserved keywords)\n",
    "+ expressions and simple statements (assignment)\n",
    "+ misc (user input, comments, mutability, terminology; git: branching etc.; atom, jupyter notebooks)\n",
    "<br />\n",
    "\n",
    "## Today - Python Statements:\n",
    "- Compound statements: if/else conditionals\n",
    "- Some common patterns of usage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Structural hierarchy of a python program:\n",
    "\n",
    "+ Python program at its most basic is a **sequence** of **valid** Python statements that have been crafted to do a specific task.\n",
    "    - statement-based procedural language, that uses:\n",
    "        - **expressions** to create and process python objects\n",
    "        - **statements** to code the larger logic of a programâ€™s operation and controling how the objects interact with each another as well as with their environment\n",
    "    - For ex.:\n",
    "    ```python\n",
    "    # python's execution model\n",
    "    a = 10     # 10 is a primitive expression, evaluates to itself\n",
    "    b = 20\n",
    "    x = a + b  # arithmetic expression embedded in an assignment statement\n",
    "    print(x)\n",
    "    ```\n",
    "+ (Complex) Programs <-- modules <-- **statements <-- expressions**\n",
    "+ Python Statements are of different types, and have their own specific syntax - rules that define its structure.\n",
    "    - simple: https://docs.python.org/3/reference/simple_stmts.html\n",
    "        - general rule is that the end of a line indicates end of statement (some exceptions)\n",
    "    - compound: https://docs.python.org/3/reference/compound_stmts.html\n",
    "<br/>\n",
    "\n",
    "#### Extras:\n",
    "- Python online documentation: https://docs.python.org/3/index.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recap\n",
    "\n",
    "### Boolean expressions\n",
    "- evaluate to True or False\n",
    "\n",
    "|Operator|Expression|Comparison|\n",
    "|---|---|---|\n",
    "|==|x **==** y|is x equal to y?|\n",
    "|!=|x **!=** y|is x not equal to y?|\n",
    "|<|x **<** y|is x less than y?|\n",
    "|>|x **>** y|is x greater than y?|\n",
    "|<=|x **<=** y|is x less than or equal to y?|\n",
    "|>=|x **>=** y|is x greater than or equal to y?|\n",
    "|is|x **is** y|is x, y?|\n",
    "\n",
    "#### More complex boolean expressions can be built using additional operators\n",
    "\n",
    "+ **and** Operator\n",
    "\n",
    "|x|y|x and y|\n",
    "|---|---|---|\n",
    "|False|False|False|\n",
    "|False|True|False|\n",
    "|True|False|False|\n",
    "|True|True|True|\n",
    "\n",
    "+ **or** Operator\n",
    "\n",
    "|x|y|x or y|\n",
    "|---|---|---|\n",
    "|False|False|False|\n",
    "|False|True|True|\n",
    "|True|False|True|\n",
    "|True|True|True|\n",
    "\n",
    "+ **not** Operator\n",
    "\n",
    "|x|not x|\n",
    "|---|---|\n",
    "|False|True|\n",
    "|True|False|\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conditional Execution - Branching operation\n",
    "\n",
    "In order to write usefull programs you need to be able to control which statements are executed. This is achieved using **~if~** statements.\n",
    "\n",
    "**~if~** statements have the following format\n",
    "\n",
    "```python\n",
    "if <expression>:           # header\n",
    "    <statement block>      # statement block\n",
    "```\n",
    "\n",
    "![alt text](http://www.openbookproject.net/books/bpp4awd/_images/flowchart_if_only.png)\n",
    "\n",
    "Note that the **statement block** is indented (leading white spaces). Physical indentation is how Python determines how long a compound/nested statement block lasts. Here, it separates code that should be executed by the if statement and code that is executed regardless of the statement.\n",
    "\n",
    "In the following code **statement1** and **statement2** are only executed if the **expression** is true. **statement3** will be executed regardless of the if statement.\n",
    "\n",
    "```python\n",
    "if <expression>:\n",
    "    statement1\n",
    "    statement2\n",
    "statement3\n",
    "```\n",
    "\n",
    "**Notes on indentation:**\n",
    "- be consistent (within block, and preferably within whole program) - **syntax rule**\n",
    "- convention is use single tab or 4 white spaces (configurable in most integrated dev environments - IDEs), although anything else consistent will work too.\n",
    "- don't mix tabs and spaces - can cause major readability issues if someone else's editor is set to display tabs differently than yours.\n",
    "\n",
    "```python\n",
    "if True:\n",
    "    print ('Hello') # 4 spaces\n",
    "    print ('Hello') # 1 tab (this is bad. Use one of the other)\n",
    "```\n",
    "\n",
    "The following code will result in an error as the spaces are inconsistant\n",
    "\n",
    "```python\n",
    "if True:\n",
    "    print ('Hello') # 4 spaces\n",
    "     print ('Hello') # 5 spaces\n",
    "```\n",
    "\n",
    "The following code is valid but not preferred due to different indentations in different code blocks\n",
    "\n",
    "```python\n",
    "if True:\n",
    "    print ('Hello') # 4 spaces\n",
    "    print ('Hello') # 5 spaces\n",
    "        \n",
    "x = 10\n",
    "if x > 5:\n",
    "        print('large number')\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n",
      "Hello\n",
      "large number\n"
     ]
    }
   ],
   "source": [
    "if True:\n",
    "    print ('Hello') # 4 spaces\n",
    "    print ('Hello') # 5 spaces\n",
    "\n",
    "x = 10\n",
    "if x > 5:\n",
    "        print('large number')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Alternate execution/Branching\n",
    "```python\n",
    "if <expression>:\n",
    "    <statement_1>\n",
    "else:\n",
    "    <statement_2>\n",
    "```\n",
    "![alt text](http://www.openbookproject.net/books/bpp4awd/_images/flowchart_if_else.png)\n",
    "\n",
    "```python\n",
    "val = int(input('Enter a number: '))    # Note the typecasting\n",
    "if val % 2 == 0:\n",
    "    print('You entered an even number')\n",
    "else:\n",
    "    print('You entered an odd number')\n",
    "```\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "val = int(input('12'))    # Note the typecasting\n",
    "if val % 2 == 0:\n",
    "    print('You entered an even number')\n",
    "else:\n",
    "    print('You entered an odd number')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multiple tests (chaining)\n",
    "```python\n",
    "if x < y:\n",
    "    STATEMENTS_A\n",
    "elif x > y:\n",
    "    STATEMENTS_B\n",
    "else:\n",
    "    STATEMENTS_C\n",
    "```\n",
    "\n",
    "![alt text](http://www.openbookproject.net/books/bpp4awd/_images/flowchart_chained_conditional.png)\n",
    "\n",
    "```python\n",
    "val = int(input('Enter a number: '))    # Note the typecasting\n",
    "if val % 2 == 0 and val >= 0:\n",
    "    print('You entered an even positive number')\n",
    "elif val % 2 == 0 and val < 0:\n",
    "    print('You entered an even negative number')\n",
    "else:\n",
    "    print('You entered an odd number)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "val = int(input('Enter a number:'))    # Note the typecasting\n",
    "if val % 2 == 0:\n",
    "    print('You entered an even number')\n",
    "else:\n",
    "    print('You entered an odd number')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 12\n",
      "You entered an even number\n"
     ]
    }
   ],
   "source": [
    "val = int(input('Enter a number: '))    # Note the typecasting\n",
    "if val % 2 == 0:\n",
    "    print('You entered an even number')\n",
    "else:\n",
    "    print('You entered an odd number')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nested conditionals\n",
    "```python\n",
    "if a > b:\n",
    "    STATEMENTS_A\n",
    "else:\n",
    "    if x > y:\n",
    "        STATEMENTS_B\n",
    "    else:\n",
    "        STATEMENTS_C\n",
    "```\n",
    "\n",
    "![alt text](http://www.openbookproject.net/books/bpp4awd/_images/flowchart_nested_conditional.png)\n",
    "\n",
    "#### Example:\n",
    "```python\n",
    "disease = int(input('Enter disease state (1 or 0): '))\n",
    "if not disease:\n",
    "    print('no drug required')\n",
    "else:\n",
    "    xyz_expr_count = int(input('Enter xyz_expr_count: '))\n",
    "    if 0 < xyz_expr_count <= 4:\n",
    "        print('give drug A')\n",
    "    elif 4 < xyz_expr_count <= 10:\n",
    "        print('give drug B')\n",
    "    else:\n",
    "        print('give drug C')\n",
    "```\n",
    "**Note:** You may flip the if condition around"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter disease state (1 or 0): 1\n",
      "Enter xyz_expr_count: 3\n",
      "give drug A\n"
     ]
    }
   ],
   "source": [
    "disease = int(input('Enter disease state (1 or 0): '))\n",
    "if not disease:\n",
    "    print('no drug required')\n",
    "else:\n",
    "    xyz_expr_count = int(input('Enter xyz_expr_count: '))\n",
    "    if 0 < xyz_expr_count <= 4:\n",
    "        print('give drug A')\n",
    "    elif 4 < xyz_expr_count <= 10:\n",
    "        print('give drug B')\n",
    "    else:\n",
    "        print('give drug C')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example: Lets build a calculator --> <font color='blue'>Run in Jupyter and Atom</font>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "disease = int(input('Enter disease state (1 or 0): '))\n",
    "if not disease:\n",
    "    print('no drug required')\n",
    "else:\n",
    "    xyz_expr_count = int(input('Enter xyz_expr_count: '))\n",
    "    if 0 < xyz_expr_count <= 4:\n",
    "        print('give drug A')\n",
    "    elif 4 < xyz_expr_count <= 10:\n",
    "        print('give drug B')\n",
    "    else:\n",
    "        print('give drug C')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter value 1:1\n",
      "Enter operator: +\n",
      "Enter value 2:1\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'values_valid' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-18c0aada59c6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'operator not valid:{} (valid values:+,-,/,*)'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moperator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0;32mif\u001b[0m \u001b[0mvalues_valid\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0moperator_valid\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0moperator\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'{} + {} = {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue1\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mvalue2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'values_valid' is not defined"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "value1 = int(input('Enter value 1:'))\n",
    "operator = input('Enter operator: ')\n",
    "value2 = int(input('Enter value 2:'))\n",
    "\n",
    "try:\n",
    "    value1 = float(value1)\n",
    "    value2 = float(value2)\n",
    "    \n",
    "except ValueError:\n",
    "    sys.exit(\"at least one value is invalid\")\n",
    "\n",
    "if operator not in '+-/*':\n",
    "    sys.exit('operator not valid:{} (valid values:+,-,/,*)'.format(operator))\n",
    "\n",
    "if values_valid and operator_valid:\n",
    "    if operator == '+':\n",
    "        print('{} + {} = {}'.format(value1, value2, value1+value2))\n",
    "    elif operator =='-':\n",
    "        print('{} - {} = {}'.format(value1, value2, value1-value2))\n",
    "    elif operator =='/':\n",
    "        print('{} / {} = {}'.format(value1, value2, value1/value2))\n",
    "    elif operator =='*':\n",
    "        print('{} * {} = {}'.format(value1, value2, value1*value2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Fahrenheit Temperature:100.1\n",
      "37.833333333333336\n"
     ]
    }
   ],
   "source": [
    "#Temperature Convert F to C \n",
    "inp = input('Enter Fahrenheit Temperature:') \n",
    "try:\n",
    "    fahr = float(inp)\n",
    "    cel = (fahr - 32.0) * 5.0 / 9.0\n",
    "    print(cel)\n",
    "except:\n",
    "    print('Please enter a number')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Hours:50\n",
      "Enter Rate:10\n",
      "650.0\n"
     ]
    }
   ],
   "source": [
    "#Compute pay for overtime\n",
    "import sys\n",
    "Hours = int(input('Enter Hours:'))\n",
    "Rate = int(input('Enter Rate:'))\n",
    "try:\n",
    "    value1 = float(Hours)\n",
    "    value2 = float(Rate)\n",
    "    \n",
    "except ValueError:\n",
    "    sys.exit(\"at least one value is invalid\")\n",
    "    \n",
    "if value1 <= 40:\n",
    "    pay = value1*value2\n",
    "    print(pay)\n",
    "elif value1 > 40:\n",
    "    fulltimepay = (value1*value2) + (value1-40)*value2*1.5\n",
    "    print(fulltimepay)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type 1 for kg -> lb, Type 2 for lb ->kg:2\n",
      "Enter lb:40\n",
      "18.14371637742559\n"
     ]
    }
   ],
   "source": [
    "#Weight Convert kg to lb \n",
    "import sys\n",
    "unit = input('Type 1 for kg -> lb, Type 2 for lb ->kg:') \n",
    "try:\n",
    "    unit1= int(unit)\n",
    "    value1 = float(weight)\n",
    "except:\n",
    "    pass\n",
    "if unit1 == 1:\n",
    "    value1 = float(input('Enter kg:'))\n",
    "    lb=value1*2.20462\n",
    "    print(lb)\n",
    "elif unit1 == 2:\n",
    "    value1 = float(input('Enter lb:'))\n",
    "    kg = value1/2.20462\n",
    "    print(kg)\n",
    "else:\n",
    "    print('Please enter a number')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
